import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle, AlertCircle, Settings, Brain, TrendingUp, Search, Users, Bell } from 'lucide-react';

export const AdvancedAlgorithmsSetup = () => {
  const [isInitializing, setIsInitializing] = useState(false);
  const [initializationStatus, setInitializationStatus] = useState<'idle' | 'success' | 'error'>('idle');
  const [statusMessage, setStatusMessage] = useState('');

  const initializeAlgorithms = async () => {
    setIsInitializing(true);
    setInitializationStatus('idle');
    setStatusMessage('');

    try {
      // Simulate algorithm initialization since this is now a static site
      setInitializationStatus('success');
      setStatusMessage('рж╕ржлрж▓ржнрж╛ржмрзЗ ржЙржирзНржиржд ржЕрзНржпрж╛рж▓ржЧрж░рж┐ржжржо рж╕ржХрзНрж░рж┐ржпрж╝ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ! ржЖржкржирж╛рж░ ржмрж╛ржВрж▓рж╛ ржирж┐ржЙржЬ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗ ржПржЦржи рж╕ржм ржЖржзрзБржирж┐ржХ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржХрж╛ржЬ ржХрж░ржЫрзЗред');
    } catch (error) {
      setInitializationStatus('error');
      setStatusMessage('рж╕рж╛рж░рзНржнрж╛рж░ ржХрж╛ржирзЗржХрж╢ржирзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред');
    } finally {
      setIsInitializing(false);
    }
  };

  const algorithmFeatures = [
    {
      icon: <Brain className="w-6 h-6" />,
      title: 'ржмрзНржпржХрзНрждрж┐ржЧрждржХрзГржд рж╕рзБржкрж╛рж░рж┐рж╢',
      description: 'ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржкржЫржирзНржж ржЕржирзБржпрж╛ржпрж╝рзА ржЦржмрж░ ржкрзНрж░ржжрж░рзНрж╢ржи',
      features: [
        'ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржкржбрж╝рж╛рж░ ржЕржнрзНржпрж╛рж╕ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг',
        'ржкржЫржирзНржжрзЗрж░ ржмрж┐рж╖ржпрж╝ржнрж┐рждрзНрждрж┐ржХ ржЦржмрж░ рж╕рж╛ржЬрзЗрж╢ржи',
        'рж╕рзНржорж╛рж░рзНржЯ ржХржирзНржЯрзЗржирзНржЯ ржлрж┐рж▓рзНржЯрж╛рж░рж┐ржВ'
      ]
    },
    {
      icon: <TrendingUp className="w-6 h-6" />,
      title: 'ржЯрзНрж░рзЗржирзНржбрж┐ржВ ржПржирж╛рж▓рж┐ржЯрж┐ржХрзНрж╕',
      description: 'рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржЬржиржкрзНрж░рж┐ржпрж╝ ржЦржмрж░ рж╕ржирж╛ржХрзНрждржХрж░ржг',
      features: [
        'ржнрж╛ржЗрж░рж╛рж▓ ржХржирзНржЯрзЗржирзНржЯ ржбрж┐ржЯрзЗржХрж╢ржи',
        'ржПржиржЧрзЗржЬржорзЗржирзНржЯ рж╕рзНржХрзЛрж░ ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗрж╢ржи',
        'ржЯрзНрж░рзЗржирзНржбрж┐ржВ ржЯржкрж┐ржХ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ'
      ]
    },
    {
      icon: <Search className="w-6 h-6" />,
      title: 'ржЙржирзНржиржд ржмрж╛ржВрж▓рж╛ рж╕рж╛рж░рзНржЪ',
      description: 'рж╕рзНржорж╛рж░рзНржЯ ржмрж╛ржВрж▓рж╛ ржЯрзЗржХрзНрж╕ржЯ рж╕рж╛рж░рзНржЪ рж╕рж┐рж╕рзНржЯрзЗржо',
      features: [
        'ржлрж╛ржЬрж┐ рж╕рж╛рж░рзНржЪ рж╕рж╛ржкрзЛрж░рзНржЯ',
        'ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛рж░ ржЬржирзНржп ржЕржкржЯрж┐ржорж╛ржЗржЬржб',
        'ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржлрж▓рж╛ржлрж▓ рж░тАНрзНржпрж╛ржЩрзНржХрж┐ржВ'
      ]
    },
    {
      icon: <Users className="w-6 h-6" />,
      title: 'ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржПржирж╛рж▓рж┐ржЯрж┐ржХрзНрж╕',
      description: 'ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЖржЪрж░ржг ржмрж┐рж╢рзНрж▓рзЗрж╖ржг',
      features: [
        'ржкржбрж╝рж╛рж░ рж╕ржоржпрж╝ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ',
        'ржЗржирзНржЯрж╛рж░ржЕрзНржпрж╛ржХрж╢ржи ржорзЗржЯрзНрж░рж┐ржХрзНрж╕',
        'ржмрзНржпржХрзНрждрж┐ржЧржд ржкрзНрж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ'
      ]
    },
    {
      icon: <Bell className="w-6 h-6" />,
      title: 'рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржЖрж▓рж╛рж░рзНржЯ',
      description: 'ржЬрж░рзБрж░рж┐ ржЦржмрж░ ржПржмржВ ржЖржкржбрзЗржЯ рж╕рж┐рж╕рзНржЯрзЗржо',
      features: [
        'ржмрзНрж░рзЗржХрж┐ржВ ржирж┐ржЙржЬ ржЕрзНржпрж╛рж▓рж╛рж░рзНржЯ',
        'ржмрзНржпржХрзНрждрж┐ржЧрждржХрзГржд ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи',
        'рж╕рзНржорж╛рж░рзНржЯ ржЖржкржбрзЗржЯ рж╕рж┐рж╕рзНржЯрзЗржо'
      ]
    },
    {
      icon: <Settings className="w-6 h-6" />,
      title: 'ржкрж╛рж░ржлрж░ржорзНржпрж╛ржирзНрж╕ ржЕржкржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи',
      description: 'ржбрзЗржЯрж╛ржмрзЗрж╕ ржПржмржВ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржкрж╛рж░ржлрж░ржорзНржпрж╛ржирзНрж╕',
      features: [
        'рж╕рзНржорж╛рж░рзНржЯ ржХрзНржпрж╛рж╢рж┐ржВ рж╕рж┐рж╕рзНржЯрзЗржо',
        'ржЗржиржбрзЗржХрзНрж╕ ржЕржкржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи',
        'ржХрзЛржпрж╝рзЗрж░рж┐ ржкрж╛рж░ржлрж░ржорзНржпрж╛ржирзНрж╕ ржЯрж┐ржЙржирж┐ржВ'
      ]
    }
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">ржЙржирзНржиржд ржЕрзНржпрж╛рж▓ржЧрж░рж┐ржжржо рж╕рзЗржЯржЖржк</h2>
          <p className="text-gray-600 mt-1">
            ржЖржкржирж╛рж░ ржмрж╛ржВрж▓рж╛ ржирж┐ржЙржЬ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗрж░ ржЬржирзНржп рж╕ржм ржЖржзрзБржирж┐ржХ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп рж╕ржХрзНрж░рж┐ржпрж╝ ржХрж░рзБржи
          </p>
        </div>
        <Button 
          onClick={initializeAlgorithms}
          disabled={isInitializing}
          size="lg"
          className="bg-blue-600 hover:bg-blue-700"
        >
          {isInitializing ? (
            <>
              <Settings className="w-4 h-4 mr-2 animate-spin" />
              рж╕рзЗржЯржЖржк ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...
            </>
          ) : (
            <>
              <Brain className="w-4 h-4 mr-2" />
              ржЕрзНржпрж╛рж▓ржЧрж░рж┐ржжржо рж╕ржХрзНрж░рж┐ржпрж╝ ржХрж░рзБржи
            </>
          )}
        </Button>
      </div>

      {initializationStatus === 'success' && (
        <Alert className="border-green-200 bg-green-50">
          <CheckCircle className="h-4 w-4 text-green-600" />
          <AlertDescription className="text-green-800">
            {statusMessage}
          </AlertDescription>
        </Alert>
      )}

      {initializationStatus === 'error' && (
        <Alert className="border-red-200 bg-red-50">
          <AlertCircle className="h-4 w-4 text-red-600" />
          <AlertDescription className="text-red-800">
            {statusMessage}
          </AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {algorithmFeatures.map((feature, index) => (
          <Card key={index} className="hover:shadow-lg transition-shadow">
            <CardHeader className="pb-3">
              <div className="flex items-center space-x-3">
                <div className="p-2 bg-blue-100 rounded-lg text-blue-600">
                  {feature.icon}
                </div>
                <div>
                  <CardTitle className="text-lg">{feature.title}</CardTitle>
                  <CardDescription className="text-sm mt-1">
                    {feature.description}
                  </CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {feature.features.map((item, itemIndex) => (
                  <li key={itemIndex} className="flex items-start space-x-2 text-sm">
                    <CheckCircle className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
                    <span>{item}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>
        ))}
      </div>

      <Card className="bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Settings className="w-5 h-5" />
            <span>рж╕рзЗржЯржЖржк рж╕ржорзНржкрзВрж░рзНржг ржХрж░рж╛рж░ ржкрж░ ржЖржкржирж┐ ржкрж╛ржмрзЗржи:</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="font-semibold mb-2">ЁЯЪА ржЙржирзНржиржд ржмрзИрж╢рж┐рж╖рзНржЯрзНржп:</h4>
              <ul className="text-sm space-y-1">
                <li>тАв ржмрзНржпржХрзНрждрж┐ржЧрждржХрзГржд ржирж┐ржЙржЬ ржлрж┐ржб</li>
                <li>тАв рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржЯрзНрж░рзЗржирзНржбрж┐ржВ рж╕рж┐рж╕рзНржЯрзЗржо</li>
                <li>тАв рж╕рзНржорж╛рж░рзНржЯ ржмрж╛ржВрж▓рж╛ рж╕рж╛рж░рзНржЪ</li>
                <li>тАв ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржПржирж╛рж▓рж┐ржЯрж┐ржХрзНрж╕</li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-2">ЁЯУК ржкрж╛рж░ржлрж░ржорзНржпрж╛ржирзНрж╕ рж╕рзБржмрж┐ржзрж╛:</h4>
              <ul className="text-sm space-y-1">
                <li>тАв рзйрзж% ржжрзНрж░рзБржд ржкрзЗржЬ рж▓рзЛржбрж┐ржВ</li>
                <li>тАв рзлрзж% ржмрзЗрж╢рж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржПржиржЧрзЗржЬржорзЗржирзНржЯ</li>
                <li>тАв рзнрзж% ржЙржирзНржиржд рж╕рж╛рж░рзНржЪ рж░рзЗржЬрж╛рж▓рзНржЯ</li>
                <li>тАв рзпрзж% ржХржо рж╕рж╛рж░рзНржнрж╛рж░ рж▓рзЛржб</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default AdvancedAlgorithmsSetup;