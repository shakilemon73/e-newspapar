import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://mrjukcqspvhketnfzmud.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1yanVrY3FzcHZoa2V0bmZ6bXVkIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjUxMTE1OSwiZXhwIjoyMDY4MDg3MTU5fQ.0bfOMGPVOFGAUDH-mdIXWRGoUDA1-B_95yQZjlZCZx4';

const supabase = createClient(supabaseUrl, supabaseKey);

async function implementHighPriorityTables() {
  console.log('üöÄ Implementing High Priority Tables...\n');
  
  // 1. Populate user_saved_articles
  await populateUserSavedArticles();
  
  // 2. Populate comments table
  await populateComments();
  
  // 3. Populate tags table
  await populateTags();
  
  // 4. Populate article_tags (many-to-many)
  await populateArticleTags();
  
  // 5. Populate user_comments
  await populateUserComments();
  
  console.log('\n‚úÖ High priority tables implementation complete!');
}

async function populateUserSavedArticles() {
  console.log('üìö Setting up user_saved_articles...');
  
  try {
    const { data: articles } = await supabase
      .from('articles')
      .select('id')
      .limit(5);
    
    if (articles && articles.length > 0) {
      const savedArticlesData = [
        {
          user_id: '12345678-1234-1234-1234-123456789012',
          article_id: articles[0].id,
          folder_name: 'favorites',
          notes: 'Important article to read later'
        },
        {
          user_id: '12345678-1234-1234-1234-123456789012',
          article_id: articles[1]?.id || articles[0].id,
          folder_name: 'sports',
          notes: null
        },
        {
          user_id: '87654321-4321-4321-4321-210987654321',
          article_id: articles[2]?.id || articles[0].id,
          folder_name: 'politics',
          notes: 'Need to fact-check this'
        }
      ];
      
      const { error } = await supabase
        .from('user_saved_articles')
        .insert(savedArticlesData);
      
      if (error) {
        console.log(`   ‚ùå Error: ${error.message}`);
      } else {
        console.log('   ‚úÖ User saved articles populated');
      }
    }
  } catch (error) {
    console.log(`   ‚ùå Error: ${error.message}`);
  }
}

async function populateComments() {
  console.log('üí¨ Setting up comments...');
  
  try {
    const { data: articles } = await supabase
      .from('articles')
      .select('id')
      .limit(3);
    
    if (articles && articles.length > 0) {
      const commentsData = [
        {
          article_id: articles[0].id,
          user_id: '12345678-1234-1234-1234-123456789012',
          content: '‡¶è‡¶á ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶§‡¶•‡ßç‡¶Ø‡¶¨‡¶π‡ßÅ‡¶≤‡•§ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶≤‡ßá‡¶ñ‡¶ï‡¶ï‡ßá‡•§',
          author_name: '‡¶∞‡¶π‡¶ø‡¶Æ ‡¶Ü‡¶π‡¶Æ‡ßá‡¶¶',
          is_approved: true
        },
        {
          article_id: articles[0].id,
          user_id: '87654321-4321-4321-4321-210987654321',
          content: '‡¶Ü‡¶∞‡¶ì ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶≤‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶π‡¶§‡ßã‡•§',
          author_name: '‡¶ï‡¶∞‡¶ø‡¶Æ ‡¶â‡¶¶‡ßç‡¶¶‡¶ø‡¶®',
          is_approved: true
        },
        {
          article_id: articles[1]?.id || articles[0].id,
          user_id: '12345678-1234-1234-1234-123456789012',
          content: '‡¶ö‡¶Æ‡ßé‡¶ï‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£!',
          author_name: '‡¶´‡¶æ‡¶§‡¶ø‡¶Æ‡¶æ ‡¶ñ‡¶æ‡¶§‡ßÅ‡¶®',
          is_approved: true
        }
      ];
      
      const { error } = await supabase
        .from('comments')
        .insert(commentsData);
      
      if (error) {
        console.log(`   ‚ùå Error: ${error.message}`);
      } else {
        console.log('   ‚úÖ Comments populated');
      }
    }
  } catch (error) {
    console.log(`   ‚ùå Error: ${error.message}`);
  }
}

async function populateTags() {
  console.log('üè∑Ô∏è  Setting up tags...');
  
  try {
    const tagsData = [
      { name: '‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£', slug: 'important', color: '#ff4444' },
      { name: '‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º', slug: 'popular', color: '#44ff44' },
      { name: '‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑', slug: 'latest', color: '#4444ff' },
      { name: '‡¶¨‡¶ø‡¶∂‡ßá‡¶∑', slug: 'special', color: '#ff44ff' },
      { name: '‡¶¨‡ßç‡¶∞‡ßá‡¶ï‡¶ø‡¶Ç', slug: 'breaking', color: '#ffff44' },
      { name: '‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£', slug: 'analysis', color: '#44ffff' },
      { name: '‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§', slug: 'opinion', color: '#ff8844' },
      { name: '‡¶§‡¶•‡ßç‡¶Ø', slug: 'facts', color: '#8844ff' }
    ];
    
    const { error } = await supabase
      .from('tags')
      .insert(tagsData);
    
    if (error) {
      console.log(`   ‚ùå Error: ${error.message}`);
    } else {
      console.log('   ‚úÖ Tags populated');
    }
  } catch (error) {
    console.log(`   ‚ùå Error: ${error.message}`);
  }
}

async function populateArticleTags() {
  console.log('üîó Setting up article_tags relationships...');
  
  try {
    const { data: articles } = await supabase
      .from('articles')
      .select('id')
      .limit(5);
    
    const { data: tags } = await supabase
      .from('tags')
      .select('id')
      .limit(4);
    
    if (articles && tags && articles.length > 0 && tags.length > 0) {
      const articleTagsData = [
        { article_id: articles[0].id, tag_id: tags[0].id },
        { article_id: articles[0].id, tag_id: tags[1].id },
        { article_id: articles[1]?.id || articles[0].id, tag_id: tags[0].id },
        { article_id: articles[1]?.id || articles[0].id, tag_id: tags[2]?.id || tags[0].id },
        { article_id: articles[2]?.id || articles[0].id, tag_id: tags[1].id },
        { article_id: articles[3]?.id || articles[0].id, tag_id: tags[3]?.id || tags[0].id }
      ];
      
      const { error } = await supabase
        .from('article_tags')
        .insert(articleTagsData);
      
      if (error) {
        console.log(`   ‚ùå Error: ${error.message}`);
      } else {
        console.log('   ‚úÖ Article-tag relationships populated');
      }
    }
  } catch (error) {
    console.log(`   ‚ùå Error: ${error.message}`);
  }
}

async function populateUserComments() {
  console.log('üë• Setting up user_comments...');
  
  try {
    const { data: articles } = await supabase
      .from('articles')
      .select('id')
      .limit(3);
    
    if (articles && articles.length > 0) {
      const userCommentsData = [
        {
          user_id: '12345678-1234-1234-1234-123456789012',
          article_id: articles[0].id,
          comment: '‡¶¶‡ßÅ‡¶∞‡ßç‡¶¶‡¶æ‡¶®‡ßç‡¶§ ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß! ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∂‡¶ø‡¶ñ‡¶≤‡¶æ‡¶Æ‡•§',
          is_approved: true
        },
        {
          user_id: '87654321-4321-4321-4321-210987654321',
          article_id: articles[1]?.id || articles[0].id,
          comment: '‡¶è‡¶á ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶§‡¶•‡ßç‡¶Ø ‡¶ö‡¶æ‡¶á‡•§',
          is_approved: true
        },
        {
          user_id: '12345678-1234-1234-1234-123456789012',
          article_id: articles[2]?.id || articles[0].id,
          comment: '‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡•§',
          is_approved: false
        }
      ];
      
      const { error } = await supabase
        .from('user_comments')
        .insert(userCommentsData);
      
      if (error) {
        console.log(`   ‚ùå Error: ${error.message}`);
      } else {
        console.log('   ‚úÖ User comments populated');
      }
    }
  } catch (error) {
    console.log(`   ‚ùå Error: ${error.message}`);
  }
}

async function verifyImplementation() {
  console.log('\nüîç Verifying implementation...\n');
  
  const tables = ['user_saved_articles', 'comments', 'tags', 'article_tags', 'user_comments'];
  
  for (const table of tables) {
    try {
      const { count } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true });
      
      console.log(`‚úÖ ${table}: ${count || 0} records`);
    } catch (error) {
      console.log(`‚ùå ${table}: Error - ${error.message}`);
    }
  }
}

// Run implementation
implementHighPriorityTables().then(verifyImplementation);